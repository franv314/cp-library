searchState.loadedDescShard("cp_library", 0, "Algorithms and Data Structures for Competitive Programming\nBinary search utilities\nData Structures\nUtilities for I/O\nMath utilities\nString utilities\nDenotes types over which a binary search can be performed.\nShould return whether two values of <code>Self</code> can be considered …\nReturns the first value in $[l, r)$ for which <code>predicate</code> …\nReturns the first value in $[l, r)$ for which <code>predicate</code> …\nReturns the first value in $[l, r)$ for which <code>predicate</code> …\nShould return the midpoint of two values of <code>Self</code>.\nCoordinate compressor\nSegment Trees\nSorted vectors\nA <code>SortedVec</code> wrapper able to provide coordinate compression\nCompresses a given coordinate\nDecompresses a given coordinate\nReturns the argument unchanged.\nCreates a compressor from a list of coordinates\nCalls <code>U::from(self)</code>.\nReturns the number of stored coordinates\nBasic segment tree over a monoid <code>T</code>\nReturns the argument unchanged.\nBuilds a segment tree from a slice of <code>T</code>.\nAccesses the element at position <code>pos</code> in the segment tree\nCalls <code>U::from(self)</code>.\nBuilds a segment tree of given <code>size</code>, filled with identity …\nPerform a range query on the range $[l, r)$.\nUpdates the element at <code>pos</code> with value <code>val</code>\nA sorted vector over a total order (<code>Ord</code>) <code>T</code>\nReturns the argument unchanged.\nConversion from an already sorted slice\nCalls <code>U::from(self)</code>.\nFinds the index of the first element which is not smaller …\nReduce multiple occurrences of a value to a single one\nFinds the index of the first element which is greater than …\nBuffered token-based input reader.\nBuffered output writer.\nFlushes the writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts a single token and parses into a <code>FromStr</code> type.\nExtracts <code>size</code> tokens of the same <code>FromStr</code> type and collect …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds an input reader over a given reader, consuming it.\nBuilds an output writer over a given writer, consuming it.\nWrites <code>val</code>.\nWrites <code>val</code> followed by a delimiter.\nWrites the elements of the slice <code>val</code>, separated by <code>delim</code>.\nWrites the elements of the slice <code>val</code>, separated by <code>delim</code> …\nAbstract algebra traits\nAn Abelian group must satisfy commutativity\nA Group must have inverses for all elements.\nThe neutral element of the monoid\nA Magma has a binary operation\nA Monoid must have a neutral element.\nA Semigroup must satisfy associativity\nCommon implementation of algebraic traits\nThe inverse element on the group.\nThe binary operation of the magma\nCyclic dictionary basic factor of a string over an …\nCompares two substrings $[l_1, r_1)$ and $[l_2, r_2)$\nConstructs a DBF from a slice of <code>T</code>\nReturns the argument unchanged.\nGives a representative of a substring $[l, r)$ of the …\nCalls <code>U::from(self)</code>.\nReturns the last row of the DBF (order of cyclic shifts)\nConstructs the Suffix array and LCP array of a slice of <code>T</code>\nConstructs the Suffix array of a slice of <code>T</code>\nCalculate Z-function of a given slice of an <code>Eq</code> type <code>T</code>.")