var searchIndex = new Map(JSON.parse('[["cp_library",{"t":"CCCCCKMHHHMCCCFNNNNNNNNNNNFNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNCKKTKKKCMMFNNNNNNNNNNNNHHNNNNH","n":["binsearch","ds","inout","math","string","BinarySearchable","close_enough","first_none","first_some","first_true","midpoint","coord_comp","segtree","sorted_vec","CoordinateCompressor","borrow","borrow_mut","compress","decompress","from","from_coords","into","size","try_from","try_into","type_id","SegTree","borrow","borrow_mut","clone","clone_into","clone_to_uninit","fmt","from","","index","into","new","query","to_owned","try_from","try_into","type_id","update","SortedVec","borrow","borrow_mut","clone","clone_into","clone_to_uninit","deref","deref_mut","fmt","from","","from_sorted_slice","into","lower_bound","make_unique","to_owned","try_from","try_into","type_id","upper_bound","InputReader","OutputWriter","borrow","","borrow_mut","","flush","from","","get","get_vec","into","","new","","put","put_d","put_slice","put_slice_d","try_from","","try_into","","type_id","","algebra","Abelian","Group","ID","Magma","Monoid","Semigroup","instances","inv","op","DBF","borrow","borrow_mut","clone","clone_into","clone_to_uninit","cmp","fmt","from","","get_repr","into","last_row","lcp","suffix_array","to_owned","try_from","try_into","type_id","z_array"],"q":[[0,"cp_library"],[5,"cp_library::binsearch"],[11,"cp_library::ds"],[14,"cp_library::ds::coord_comp"],[26,"cp_library::ds::segtree"],[44,"cp_library::ds::sorted_vec"],[64,"cp_library::inout"],[89,"cp_library::math"],[90,"cp_library::math::algebra"],[99,"cp_library::string"],[119,"core::option"],[120,"core::ops::function"],[121,"core::cmp"],[122,"core::clone"],[123,"alloc::vec"],[124,"core::result"],[125,"core::any"],[126,"core::fmt"],[127,"std::io"],[128,"core::str::traits"],[129,"core::marker"]],"i":"``````b```0````Ab0000000000`B`0000000000000000`C`000000000000000000``CfCb100101110100000101010```Bn````DbDd`Df00000000000``0000`","f":"``````{{{d{b}}{d{b}}}f}{{ccg}{{j{c{h{e}}}}}b{}{{n{c}{{l{{h{e}}}}}}}}0{{cce}cb{{n{c}{{l{f}}}}}}{{{d{b}}{d{b}}}b}````{d{{d{c}}}{}}{{{d{A`}}}{{d{A`c}}}{}}{{{d{{Ab{c}}}}{d{c}}}Ad{AfAh}}{{{d{{Ab{c}}}}Ad}c{AfAh}}{cc{}}{{{Aj{c}}}{{Ab{c}}}{AfAh}}{{}c{}}{{{d{{Ab{c}}}}}Ad{AfAh}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{dAn}`:9{{{d{{B`{c}}}}}{{B`{c}}}Ah}{{d{d{A`c}}}Bb{}}{{dBd}Bb}{{{d{{B`{c}}}}{d{A`Bf}}}BhBj}:{{{d{{Bl{c}}}}}{{B`{c}}}{AhBn}}{{{d{{B`{c}}}}Ad}{{d{e}}}{AhBn}{}}:{Ad{{B`{c}}}{AhBn}}{{{d{{B`{c}}}}AdAd}c{AhBn}}{dc{}};:9{{{d{A`{B`{c}}}}Ad{d{c}}}Bb{AhBn}}`{d{{d{c}}}{}}{{{d{A`}}}{{d{A`c}}}{}}{{{d{{C`{c}}}}}{{C`{c}}}Ah};:{{{d{{C`{c}}}}}{{d{e}}}Af{}}{{{d{A`{C`{c}}}}}{{d{A`e}}}Af{}}{{{d{{C`{c}}}}{d{A`Bf}}}BhBj}{{{Aj{c}}}{{C`{c}}}Af}{cc{}}{{{d{{Bl{c}}}}}{{C`{c}}}{AfAh}}{{}c{}}{{{d{{C`{c}}}}{d{c}}}Ad{AfAh}}{{{d{A`{C`{c}}}}}Bb{AfAh}}={c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{dAn}4``>>=={{{d{A`{Cb{c}}}}}BbCd}88{{{d{A`{Cf{c}}}}}eChCj}{{{d{A`{Cf{c}}}}Ad}{{Aj{e}}}ChCj}88{c{{Cf{c}}}Ch}{c{{Cb{c}}}Cd}{{{d{A`{Cb{c}}}}{d{e}}}BbCd{ClCn}}{{{d{A`{Cb{c}}}}{d{e}}D`}BbCd{ClCn}}{{{d{A`{Cb{c}}}}{d{{Bl{e}}}}D`}BbCdCl}{{{d{A`{Cb{c}}}}{d{{Bl{e}}}}D`D`}BbCdCl};;::99````````{DbDb}{{DdDd}Dd}`{d{{d{c}}}{}}{{{d{A`}}}{{d{A`c}}}{}}{{{d{Df}}}Df}{{d{d{A`c}}}Bb{}}{{dBd}Bb}{{{d{Df}}AdAdAdAd}Dh}{{{d{Df}}{d{A`Bf}}}Bh}{{{d{{Bl{c}}}}}DfAf}{cc{}}{{{d{Df}}AdAd}{{j{AdAd}}}}{{}c{}}{{{d{Df}}}{{Aj{Ad}}}}{{{d{{Bl{c}}}}}{{j{{Aj{Ad}}{Aj{Ad}}}}}Af}{{{d{{Bl{c}}}}}{{Aj{Ad}}}Af}{dc{}}{c{{Al{e}}}{}{}}{{}{{Al{c}}}{}}{dAn}{{{d{{Bl{c}}}}}{{Aj{Ad}}}Dj}","D":"I`","p":[[10,"BinarySearchable",5],[1,"reference",null,null,1],[1,"bool"],[6,"Option",119,null,1],[1,"tuple",null,null,1],[17,"Output"],[10,"Fn",120],[0,"mut"],[5,"CoordinateCompressor",14],[1,"usize"],[10,"Ord",121],[10,"Clone",122],[5,"Vec",123],[6,"Result",124,null,1],[5,"TypeId",125],[5,"SegTree",26],[1,"unit"],[1,"u8"],[5,"Formatter",126],[8,"Result",126],[10,"Debug",126],[1,"slice"],[10,"Monoid",90],[5,"SortedVec",44],[5,"OutputWriter",64],[10,"Write",127],[5,"InputReader",64],[10,"Read",127],[10,"FromStr",128],[10,"Display",126],[10,"Sized",129],[1,"char"],[10,"Group",90],[10,"Magma",90],[5,"DBF",99],[6,"Ordering",121],[10,"Eq",121]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAC8ACwAQAAEAGAACABwABQAoAAMALgAIADwAAwBDAAMAVAAFAGUABABrAAAAcwADAA==","P":[[7,"N,T,F"],[9,"N,F"],[10,""],[15,"T"],[21,"U"],[22,"T"],[23,"U,T"],[24,"U"],[25,""],[27,"T"],[31,""],[32,"T"],[35,"T,Index::Output"],[36,"U"],[37,"T"],[40,"U,T"],[41,"U"],[42,""],[43,"T"],[49,""],[50,"T,Deref::Target"],[52,"T"],[56,"U"],[57,"T"],[60,"U,T"],[61,"U"],[62,""],[63,"T"],[70,"W"],[71,"T"],[73,"R,T"],[75,"U"],[77,"R"],[78,"W"],[79,"W,T"],[83,"U,T"],[85,"U"],[87,""],[100,"T"],[102,""],[103,"T"],[104,""],[107,"T"],[109,""],[110,"U"],[111,""],[112,"T"],[115,"U,T"],[116,"U"],[117,""],[118,"T"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[4725]}